version: '2.1'

networks:
  backend:
    name: backendnetwork
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 192.168.100.0/24
    internal: false


services:

  configserver:
    image: configserv:latest
    hostname: configserver
    ports:
      - "8071:8071"
    environment:
      SPRING_PROFILES_ACTIVE: native
    #    depends_on:
    #    - postgres
    networks:
      backend:
        aliases:
          - "configserver"
    #    healthcheck:
    #      test: [ "CMD", "curl --fail http://localhost:8071/actuator/health || exit 1" ]
    #      test: ["CMD", "ping", "-h", "http://localhost:8071/actuator/health"]
    #      test: [ "CMD", "curl", "http://localhost:8071/actuator/health"]
    #      test: ["CMD", "curl", "-f", "http://localhost:8071/actuator/health"]
    #      test: [ "CMD-SHELL", "curl", "http://localhost:8071/actuator/health"]
    #      test: [ "CMD-SHELL", "curl", "-f", "http://localhost:8071"]
    #      test: curl -m 5 --silent --fail --request GET http://localhost:8071/actuator/health | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
  #      interval: 2s
  #      timeout: 5s
  #      retries: 5
  postgres:
    image: postgres:latest
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      #firstly need in docker ui sharing resource folder, for access docker compose
      - D:\Java\projects\Spring_cloud_LicenseService\src\main\resources\db\migration\V0_01__create_licenses.sql:/docker-entrypoint-initdb.d/V0_01__create_licenses.sql
      - D:\Java\projects\Spring_cloud_LicenseService\src\main\resources\db\migration\V0_02__fill_licenses.sql:/docker-entrypoint-initdb.d/V0_02__fill_licenses.sql
    networks:
      backend:
        aliases:
          - "postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      configserver:
        condition: service_started

  eurekaserver:
    image: eurekaserv:latest
    ports:
      - "8070:8070"
    environment:
      - "SPRING_PROFILES_ACTIVE=default"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server"

#  gatewayserver:
#    image: gatewayserv:latest
#    ports:
#      - "8070:8070"
#    environment:
#      - "SPRING_PROFILES_ACTIVE=default"
#    depends_on:
#      eurekaserver:
#        condition: service_started
#    networks:
#      backend:
#        aliases:
#          - "gateway-server"

  licensingservice:
    image: licenseserv:latest
    ports:
      - "8074:8074"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
    depends_on:
      postgres:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "licenseserv"

  orgservice:
    image: orgserv:latest
    ports:
      - "8075:8075"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
    depends_on:
      postgres:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      licensingservice:
        condition:  service_started
    networks:
      backend:
        aliases:
          - "orgserv"