version: '2.1'

networks:
  backend:
    name: backendnetwork
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 192.168.100.0/24
    internal: false


services:

  configserver:
    image: configserv:latest
    hostname: configserver
    ports:
      - "8071:8071"
    environment:
      SPRING_PROFILES_ACTIVE: native
    #    depends_on:
    #    - postgres
    networks:
      backend:
        aliases:
          - "configserver"

  postgres:
    image: postgres:latest
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      #firstly need in docker ui sharing resource folder, for access docker compose
      - D:\Java\projects\Spring_cloud_LicenseService\src\main\resources\db\migration\V0_01__create_licenses.sql:/docker-entrypoint-initdb.d/V0_01__create_licenses.sql
      - D:\Java\projects\Spring_cloud_LicenseService\src\main\resources\db\migration\V0_02__fill_licenses.sql:/docker-entrypoint-initdb.d/V0_02__fill_licenses.sql
    networks:
      backend:
        aliases:
          - "postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      configserver:
        condition: service_started

  eurekaserver:
    image: eurekaserv:latest
    ports:
      - "8070:8070"
    environment:
      - "SPRING_PROFILES_ACTIVE=default"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server"

  gatewayserver:
    image: gatewayserv:latest
    ports:
      - "8072:8072"
    environment:
      SPRING_CLOUD_CONFIG_URI: "http://192.168.0.207:8071"
      CONFIGSERVER_PORT: "8071"
      EUREKASERVER_URI: "http://192.168.0.207:8070/eureka/"
      EUREKASERVER_PORT: "8070"
    depends_on:
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
#      - KAFKA_ADVERTISED_HOST_NAME=127.0.0.1
      - KAFKA_ADVERTISED_PORT=9092
#      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"

  redisserver:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      backend:
        aliases:
          - "redis"

#  licensingservice:
#    image: licenseserv:latest
#    ports:
#      - "8074:8074"
#    environment:
#      SPRING_PROFILES_ACTIVE: "dev"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      configserver:
#        condition: service_started
#      eurekaserver:
#        condition: service_started
#      zookeeper:
#        condition: service_started
#      kafkaserver:
#          condition: service_started
#    networks:
#      backend:
#        aliases:
#          - "licenseserv"

#  orgservice:
#    image: orgserv:latest
#    ports:
#      - "8075:8075"
#    environment:
#      SPRING_PROFILES_ACTIVE: "dev"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      configserver:
#        condition: service_started
#      eurekaserver:
#        condition: service_started
#      licensingservice:
#        condition: service_started
#      zookeeper:
#        condition: service_started
#      kafkaserver:
#        condition: service_started
#    networks:
#      backend:
#        aliases:
#          - "orgserv"